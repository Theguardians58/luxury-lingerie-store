-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  full_name text,
  shipping_address jsonb,
  updated_at timestamp with time zone
);

-- Set up Row Level Security (RLS)
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name)
  values (new.id, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- CATEGORIES TABLE
create table categories (
  id bigint generated by default as identity primary key,
  name text not null unique,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table categories enable row level security;
create policy "Categories are viewable by everyone." on categories for select using (true);
create policy "Admins can manage categories." on categories for all using (auth.role() = 'authenticated');

-- PRODUCTS TABLE
create table products (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  price numeric(10, 2) not null,
  category_id bigint references categories(id) on delete set null,
  slug text not null unique,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table products enable row level security;
create policy "Products are viewable by everyone." on products for select using (true);
create policy "Admins can manage products." on products for all using (auth.role() = 'authenticated');


-- PRODUCT_VARIANTS TABLE (e.g., specific size/color combinations)
create table product_variants (
  id bigint generated by default as identity primary key,
  product_id bigint references products(id) on delete cascade not null,
  size text not null,
  color text not null,
  stock_quantity integer not null default 0,
  constraint unique_variant unique (product_id, size, color)
);
alter table product_variants enable row level security;
create policy "Variants are viewable by everyone." on product_variants for select using (true);
create policy "Admins can manage variants." on product_variants for all using (auth.role() = 'authenticated');


-- PRODUCT_IMAGES TABLE
create table product_images (
  id bigint generated by default as identity primary key,
  product_id bigint references products(id) on delete cascade not null,
  image_url text not null,
  alt_text text
);
alter table product_images enable row level security;
create policy "Images are viewable by everyone." on product_images for select using (true);
create policy "Admins can manage images." on product_images for all using (auth.role() = 'authenticated');


-- ORDERS TABLE
create table orders (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete set null,
  total_amount numeric(10, 2) not null,
  status text not null default 'pending', -- e.g., pending, processing, shipped, delivered, cancelled
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  shipping_address jsonb
);
alter table orders enable row level security;
create policy "Users can view their own orders." on orders for select using (auth.uid() = user_id);
create policy "Users can create orders." on orders for insert with check (auth.uid() = user_id);
create policy "Admins can view all orders." on orders for select using (auth.role() = 'authenticated');
create policy "Admins can update order status." on orders for update using (auth.role() = 'authenticated');


-- ORDER_ITEMS TABLE
create table order_items (
  id bigint generated by default as identity primary key,
  order_id bigint references orders(id) on delete cascade not null,
  variant_id bigint references product_variants(id) on delete set null,
  quantity integer not null,
  price numeric(10, 2) not null -- price at the time of purchase
);
alter table order_items enable row level security;
create policy "Users can view their own order items." on order_items for select using (
  exists (
    select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid()
  )
);
create policy "Users can create order items." on order_items for insert with check (
  exists (
    select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid()
  )
);
create policy "Admins can view all order items." on order_items for select using (auth.role() = 'authenticated');
